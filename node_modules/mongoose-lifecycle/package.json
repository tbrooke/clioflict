{
  "name": "mongoose-lifecycle",
  "description": "Mongoose plugin adding lifecyle events on the model class",
  "version": "1.0.0",
  "author": {
    "name": "Francois Zaninotto"
  },
  "keywords": [
    "mongodb",
    "mongoose",
    "plugin",
    "presave",
    "beforesave"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/fzaninotto/mongoose-lifecycle"
  },
  "devDependencies": {
    "should": ">=0.2.1",
    "mongoose": ">=2.6.5",
    "cli-table": ">=0.0.1"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.6"
  },
  "readme": "mongoose-lifecycle\n==================\n\nMongoose plugin adding lifecyle events on the model class.\n\nInstallation\n------------\n\nAdd the plugin as a dependency to your project in `package.json`:\n\n```javascript\n{\n  \"name\": \"myproject\",\n  ...\n  \"dependencies\": {\n    \"mongoose\": \"2.6.5\",\n    \"mongoose-lifecycle\": \"1.0.0\",\n    ...\n  },\n}\n```\n\nAnd run `npm install` again.\n\nUsage\n-----\n\nInitialization is straightforward:\n\n```javascript\nvar Book = new Schema({ ... });\nBook.plugin(require('mongoose-lifecycle'));\n```\n\nNow the model emits lifecycle events before and after persistence operations:\n\n - beforeInsert\n - afterInsert\n - beforeUpdate\n - afterUpdate\n - beforeSave (called for both inserts and updates)\n - afterSave (called for both inserts and updates)\n - beforeRemove\n - afterRemove\n\nYou can listen to these events directly on the model.\n\n```javascript\nvar Book = require('path/to/models/book');\nBook.on('beforeInsert', function(book) {\n  // do stuff...\n});\n```\n\nLicense\n-------\n\nMIT License",
  "readmeFilename": "README.md",
  "_id": "mongoose-lifecycle@1.0.0",
  "dist": {
    "shasum": "cadd1a2a5d5ca2d87069203f01c954ffbddef5c0"
  },
  "_from": "mongoose-lifecycle@~1.0.0"
}
